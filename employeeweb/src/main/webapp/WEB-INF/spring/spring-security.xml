<?xml version="1.0" encoding="UTF-8"?>
<beans 	xmlns="http://www.springframework.org/schema/beans"
 		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    	xmlns:security="http://www.springframework.org/schema/security"
 		xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
   			http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd">
  
	<!-- This is where we configure Spring-Security  -->
	<security:http auto-config="true" use-expressions="true" > <!--  access-denied-page="/hrweb/auth/denied" > -->
  		
  		<security:intercept-url pattern="/hrweb/" access="isAuthenticated()"/>
  		<!-- <security:intercept-url pattern="/hrweb/" access="hasAnyRole('DEPARTMENT, EMPLOYEE')" /> -->
  		<security:intercept-url pattern="/hrweb/employee*" access="hasRole('EMPLOYEE')" />
  		<security:intercept-url pattern="/hrweb/department*" access="hasRole('DEPARTMENT')" />
  		
<!--   	<security:http-basic/> --> 
 		<security:form-login login-page="/hrweb/auth/login" default-target-url="/hrweb/" authentication-failure-url="/hrweb/auth/loginfailed"/>
		<security:logout invalidate-session="true" delete-cookies="JSESSIONID" logout-success-url="/hrweb/auth/logout" />
		  			
<!--   	<security:intercept-url pattern="/hrweb/auth/login" access="permitAll"/>
  		<security:intercept-url pattern="/hrweb/employee*" access="hasRole('ROLE_ADMIN')"/>
  		<security:intercept-url pattern="/hrweb/department*" access="hasRole('ROLE_USER')"/>
   
  		<security:form-login
    		login-page="/hrweb/auth/login"
    		authentication-failure-url="/hrweb/auth/login?error=true"
    		default-target-url="/hrweb/main/common"/>
    
  		<security:logout
    		invalidate-session="true"
    		logout-success-url="/hrweb/auth/login"
    		logout-url="/hrweb/auth/logout"/>
 -->  
	</security:http>
  
	<!-- Declare an authentication-manager to use a custom userDetailsService -->
 	<security:authentication-manager>
    	<security:authentication-provider user-service-ref="userDetailsService">
     		<security:password-encoder ref="passwordEncoder"/>
  		</security:authentication-provider>
 	</security:authentication-manager>
  
	<!-- Use a Md5 encoder since the user's passwords are stored as Md5 in the database -->
	<bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>
 
	<!-- An in-memory list of users. No need to access an external database layer.
      See Spring Security 3.1 Reference 5.2.1 In-Memory Authentication -->
  	<!-- john's password is admin, jane's password is user  -->
  	<security:user-service id="userDetailsService">
    	<security:user name="john" password="21232f297a57a5a743894a0e4a801fc3" authorities="DEPARTMENT, EMPLOYEE" />
    	<security:user name="jane" password="ee11cbb19052e40b07aac0ca060c23ee" authorities="DEPARTMENT" />
    	<security:user name="prasad" password="ee11cbb19052e40b07aac0ca060c23ee" authorities="EMPLOYEE" />
   	</security:user-service>
   	
</beans>